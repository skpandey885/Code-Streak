/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
     
      
        if(root==null) 
          return 0;
        
        int level=maxDepth(root);
    
         int k=1;
        Queue<TreeNode> queue=new LinkedList<>();
        
        queue.add(root);
        
        while(!queue.isEmpty())
        {   
            
            int size=queue.size();
            
            List<Integer> arr=new ArrayList<>();
            
            for(int i=0;i<size;i++){
             TreeNode curr=queue.poll();
                if(curr.left!=null)
              queue.add(curr.left);
           
             if(curr.right!=null)
               queue.add(curr.right);
            
            arr.add(curr.val); 
        }
          
            if(k==level-1)
                break;
            
            k++;
                
              
        }
          
        int sum=0;
        
        while(!queue.isEmpty())
          sum+=queue.poll().val;
  
        return sum;
        
        
    }
    
  int maxDepth(TreeNode root) {
     if(root==null)
         return 0;
        
        return (int) Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }
    
    
    
    
}
