// QUESTIOPN LINK: https://leetcode.com/problems/3sum/

-----------------------------------------------------------------------------------------------------------------------------------------------------
// TC: O(N^3LOGN) SC:O(N^2) - BRUTE FORCE

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

    Set<List<Integer>> res=new HashSet<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(i!=j && j!=k && i!=k){
                        if(nums[i]+nums[j]+nums[k]==0){
                            List<Integer> arr=new ArrayList<>();

                           arr.add(nums[i]);
                           arr.add(nums[j]);
                           arr.add(nums[k]);

                           Collections.sort(arr);
                            res.add(arr);
                        }
                    }
                }}}

        return new ArrayList(res);
    }
}

-----------------------------------------------------------------------------------------------------------------------------
// TC: O(N^2) SC:O(N^2) - OPTIMAL TIME COMPLEXITY

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        int n=nums.length;

        Set<List<Integer>> res=new HashSet<>();

        Arrays.sort(nums);

        if(n<3)
            return new ArrayList(res);

        for(int i=0;i<n-2;i++){
            int j=i+1;
            int k=n-1;

            while(j<k){
                int sum=nums[i]+nums[j]+nums[k];
                if(sum==0){
                    List<Integer> temp=new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);

                    res.add(temp);
                    j++;
                    k--;
                }else if(sum<0){
                    j++;
                }else{
                    k--;
                }
            }
        }

        return new ArrayList(res);

    }
}
