// QUESTION LINK: https://leetcode.com/problems/number-of-provinces/


class Solution {
    public int findCircleNum(int[][] isConnected) {
        
        // TC: O(V+E) SC: O(N)
        
        int n=isConnected.length;
        
    List<List<Integer>> graph=new ArrayList<>();
        
    for(int i=0;i<=n;i++)
        graph.add(new ArrayList());
        
        for(int i=0;i<n;i++){
            for(int j=0;j<isConnected[i].length;j++){
                if(i!=j)
                if(isConnected[i][j]==1)
                  addEdge(graph,i+1,j+1);
            }
        }
        
        boolean visited[]=new boolean[n+1];
        int count=0;
        
        for(int i=1;i<=n;i++){
            if(!visited[i]){
               traverse(graph, visited, i);
                count++;
            }
        }
        
   
        return count;
           
    }
    
     void traverse(List<List<Integer>> graph, boolean[] visited, int i){
         visited[i]=true;
         
         for(int curr: graph.get(i)){
             if(visited[curr]==false){
                 traverse(graph,visited, curr);
             }
         }
     }
    
    void addEdge(List<List<Integer>> graph, int u,int v){
        graph.get(u).add(v);
    }
}
