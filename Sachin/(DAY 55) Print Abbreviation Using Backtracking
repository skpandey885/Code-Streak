//  QUESTION LINK: https://nados.io/question/abbreviation-using-backtracking
             // TC: O(2^N) SC:O(N) i.e Recursive Space
      
import java.io.*;
import java.util.*;

public class Main {

    public static void solution(String str, String asf,int count, int pos){
       
       if(pos==str.length()){
           if(count==0){
           System.out.println(asf);
           }else{
                System.out.println(asf+String.valueOf(count));
           }
           return;
       }

       if(count>0){
         String ans=String.valueOf(count)+String.valueOf(str.charAt(pos));
         solution(str,asf+ans,0,pos+1);
       }else if(count<=0){
          String ans=String.valueOf(str.charAt(pos));
           solution(str,asf+ans,count,pos+1);
       }

          solution(str,asf,count+1,pos+1);

        
    }
	public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        solution(str,"",0,0);
    }
    
    
}
