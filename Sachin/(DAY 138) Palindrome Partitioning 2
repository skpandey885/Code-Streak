// QUESTION LINK: https://leetcode.com/problems/palindrome-partitioning-ii/


class Solution {
    public int minCut(String s) {
        
        int n = s.length();

        int dp[] = new int[n + 1];

        for (int i = n; i >= 0; i--) {
            if ((n - i) <= 1) {
                dp[i] = 0;
            } else if (isPalindrome(s.substring(i))) {
                dp[i] = 0;
            } else {
                int min = Integer.MAX_VALUE;

                for (int k = i + 1; k < n; k++) {
                    String temp = s.substring(i, k);

                    if (isPalindrome(temp)) {
                        int val = 1 + dp[k];
                        min = Math.min(val, min);
                    }
                }
                dp[i] = min;
            }
        }

        return dp[0];
    }

    boolean isPalindrome(String str) {
        int i = 0, j = str.length() - 1;

        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) return false;

            i++;
            j--;
        }

        return true;
    }
}














