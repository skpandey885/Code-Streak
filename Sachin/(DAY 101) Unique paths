// QUESTION LINK: https://leetcode.com/problems/unique-paths/

------------------------------------------------------------------------------------------------------------------------------

// TC: EXPONENTIAL SC: O(M x N) - MEMOIZATION

class Solution {

    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m + 10][n + 10];

        for (int i = 0; i < dp.length; i++) for (int j = 0; j < dp[i].length; j++) dp[i][j] = -1;

        return solve(0, 0, m, n, dp);
    }

    int solve(int i, int j, int x, int y, int dp[][]) {
        if (dp[i][j] != -1) return dp[i][j];

        if (i >= x || j >= y) {
            return 0;
        }

        if (i + 1 == x && j + 1 == y) {
            return 1;
        }

        int sum = solve(i + 1, j, x, y, dp) + solve(i, j + 1, x, y, dp);

        return dp[i][j] = sum % (2 * (int) Math.pow(10, 9));
    }
}

------------------------------------------------------------------------------------------------------------------------

// TC: O(M x N) SC: O(M x N) - TABULATION

class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m + 10][n + 10];

        for (int i = 0; i < dp.length; i++) 
            for (int j = 0; j < dp[i].length;j++)
            if (i == 0 || j == 0) dp[i][j] = 1;

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]);
            }
        }

        return dp[m - 1][n - 1];
    }
}
