// QUESTION LINK: https://practice.geeksforgeeks.org/problems/fractional-knapsack-1587115620/


import java.io.*;
import java.lang.*;
import java.util.*;

class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}

class GfG {
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int w = Integer.parseInt(inputLine[1]);
            Item[] arr = new Item[n];
            inputLine = br.readLine().trim().split(" ");
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Item(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            System.out.println(String.format("%.2f", new Solution().fractionalKnapsack(w, arr, n)));
        }
    }
}// } Driver Code Ends


/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class Solution
{

      //  TC: O(NLOGN) SC:O(1)
   
// Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
       
   double result=0;
  
   Arrays.sort(arr,new myComparator()); 
       
       for(Item p : arr){
           int ww=p.weight,vv=p.value;
           
          if(W>=ww){
              W -=ww;
              result+=vv;
          }else{
              result+=((double)vv*W/(double)ww);
              W=0;
              break;
          }
       }
       
       return result;
       
       
    }
}

class myComparator implements Comparator<Item>{
    
 public int compare(Item a, Item b) {
    
       double vbw1=((double) a.value/ (double)a.weight);
       double vbw2=((double) b.value/ (double)b.weight);
      
      return Double.compare(vbw2,vbw1);
      
    }   
}
