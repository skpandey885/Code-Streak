// QUESTION LINK: https://leetcode.com/problems/delete-operation-for-two-strings/



------------------------------------------------------------------------------------------------------------------------------------------

// TC: O(2^N) SC:O(M*N) - MODERATE SOLUTION (MEMOIZATION)

class Solution {

    public int minDistance(String word1, String word2) {
        int val = longestCommonSubsequence(word1, word2);
        val *= 2;

        return (word1.length() + word2.length() - val);
    }

    public int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[1001][1001];
        for (int i = 0; i < dp.length; i++) for (int j = 0; j < dp.length; j++) dp[i][j] = -1;

        return solve(text1, text2, text1.length(), text2.length(), dp);
    }

    int solve(String a, String b, int m, int n, int dp[][]) {
        if (m == 0 || n == 0) return 0;

        char one = a.charAt(m - 1);
        char two = b.charAt(n - 1);

        if (dp[m][n] != -1) return dp[m][n];

        if (one == two) return dp[m][n] = 1 + solve(a, b, m - 1, n - 1, dp);

        int val1 = solve(a, b, m, n - 1, dp);
        int val2 = solve(a, b, m - 1, n, dp);

        return (dp[m][n] = (int) Math.max(val1, val2));
    }
}


------------------------------------------------------------------------------------------------------------------------------------------

// TC: O(M^N) SC:O(M*N) - OPTIMAL SOLUTION

class Solution {

    public int minDistance(String word1, String word2) {
        int val = longestCommonSubsequence(word1, word2);
        val *= 2;

        return (word1.length() + word2.length() - val);
    }

    public int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[text1.length()+1][text2.length()+1];

        for (int i = 0; i < dp.length; i++) 
          for (int j = 0; j < dp[i].length; j++) 
               if(i==0 || j==0)
                     dp[i][j]=0;

        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) 
            {
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                      int val1 = dp[i][j - 1];
                     int val2 = dp[i - 1][j];
                     dp[i][j]=Math.max(val1,val2);
                }

            }}

        return dp[text1.length()][text2.length()];


    }


}

