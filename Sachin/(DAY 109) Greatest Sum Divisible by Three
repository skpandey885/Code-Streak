// QUESTION LINK: https://leetcode.com/problems/greatest-sum-divisible-by-three/

class Solution {
    public int maxSumDivThree(int[] nums) {
        
        int dp[][] = new int[nums.length+1][3];
        
        for(int i=1 ; i <=nums.length ; i++){
            
            //Coping the previous state
            for(int mod=0 ; mod<3 ; ++mod){
                dp[i][mod] = dp[i-1][mod];
            }
            
            //updating it accordingly
            for(int mod=0 ; mod<3 ; ++mod){
                int v = dp[i-1][mod]+nums[i-1];
                int r = v%3;
                dp[i][r] = Math.max(dp[i][r], v);
            }
        }
        
        return dp[nums.length][0];
    }
    
    //Recursive Solution
    private int helper(int[] nums, int i, int curr){
        if(i == nums.length && curr%3 == 0)
            return curr;
        
        if(i >= nums.length)
            return 0;

        
        int taken = helper(nums, i+1, curr+nums[i]);
        int not_taken = helper(nums, i+1, curr);
            
        return Math.max(taken, not_taken);
    }
}
