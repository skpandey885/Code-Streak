// QUESTION LINK: https://practice.geeksforgeeks.org/problems/longest-common-substring1452/1#

---------------------------------------------------------------------------------------------------------------------------------------

// TC: Lesser than Exponential      SC:O(N) - MODERATE

class Solution{
    int longestCommonSubstr(String S1, String S2, int n, int m){
     
       Map<String, Integer> map=new HashMap<>();

        return solve(S1,S2,n,m,0,map);
    }
    
    static int solve(String one, String two, int n, int m, int count,Map<String, Integer> map){
        
         if(n==0 || m==0)
         return count;
        
        String key=n+"-"+m+"-"+count;
        
        if(map.containsKey(key))
           return map.get(key);
           
         int curr=count;
        
        if(one.charAt(n-1)==two.charAt(m-1)){
            curr=solve(one,two,n-1,m-1,count+1,map);
        }
            
         int y=solve(one,two,n-1,m,0,map);
         int z=solve(one,two,n,m-1,0,map);
             
        int t=Math.max(curr, Math.max(y,z));
        map.put(key,t);
        
        return t;
        
    }
    
}

--------------------------------------------------------------------------------------------------------------------------------------------------

// TC: O(N^M)      SC:O(N^M) - OPTIMAL


class Solution{
    int longestCommonSubstr(String one, String two, int n, int m){
     
       int dp[][]=new int[n+1][m+1];
       
       for(int i=0;i<dp.length;i++){
           for(int j=0;j<dp[i].length;j++){
               if(i==0 || j==0)
               dp[i][j]=0;
           }
       }
       
          int max=Integer.MIN_VALUE;
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[i].length;j++){
                 if(one.charAt(i-1)==two.charAt(j-1)){
                 dp[i][j]=1+dp[i-1][j-1];
        }else{
             dp[i][j]=0;
        }}}
        
         for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[i].length;j++){
                max=Math.max(max,dp[i][j]);
            }}
      
        return max;
        


    }
    
  
    
}
