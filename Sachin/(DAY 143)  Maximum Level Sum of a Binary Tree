// QUESTION LINK: https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/


class Solution {

    public int maxLevelSum(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();

        int max = root.val;
        int level = 1, maxlev = 1;
        queue.add(root);

        while (!queue.isEmpty()) {
            int size = queue.size();

            List<Integer> arr = new ArrayList<>();

            int sum = 0;

            for (int i = 0; i < size; i++) {
                TreeNode curr = queue.poll();

                if (curr.left != null) {
                    queue.add(curr.left);
                    sum += curr.left.val;
                }

                if (curr.right != null) {
                    queue.add(curr.right);
                    sum += curr.right.val;
                }
            }

            level++;

            if (sum > max) {
                max = sum;
                maxlev = level;
            }
        }

        int maxDep = maxDepth(root);

        return maxlev == maxDep + 1 ? (maxlev - 1) : maxlev;
    }

    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        return (int) Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}
