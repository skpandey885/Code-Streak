// QUESTION LINK: https://leetcode.com/problems/implement-trie-prefix-tree/




class Node {
    
    Node arr[];
    boolean flag;

    Node() {
        arr = new Node[26];
        flag = false;
    }

    boolean containsKey(char ch) {
        if (arr[ch - 'a'] != null) return true; else return false;
    }

    void put(char ch, Node n) {
        arr[ch - 'a'] = n;
    }

    Node get(char ch) {
        return arr[ch - 'a'];
    }

    boolean getEndVal() {
        return flag;
    }
}

class Trie {
    Node root;

    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node dummy = root;

        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);

            if (dummy.containsKey(ch) == false) {
                dummy.put(ch, new Node());
            }

            dummy = dummy.get(ch);
        }

        dummy.flag = true;
    }

    public boolean search(String word) {
        Node dummy = root;

        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);

            if (dummy.containsKey(ch) == false) {
                return false;
            }

            dummy = dummy.get(ch);
        }

        return dummy.getEndVal();
    }

    public boolean startsWith(String word) {
        Node dummy = root;

        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);

            if (dummy.containsKey(ch) == false) {
                return false;
            }

            dummy = dummy.get(ch);
        }

        return true;
    }
}
/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
