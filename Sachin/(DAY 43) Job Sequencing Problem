// QUESTION LINK: https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#

// { Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            
            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");
            
            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            
            Solution ob = new Solution();
            
            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}// } Driver Code Ends


class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        
      Arrays.sort(arr, new myComparator());
    
      int count=0,size=0,ans=0;

      for(Job i: arr)
      size=(int)Math.max(size,i.deadline);
      
      int value[]=new int[size];
     
      for(int i=0;i<n;i++){
        int dl=arr[i].deadline;
       
       int x=0;
       while(value[dl-1-x]!=0 && (dl-1-x)>0) x++;
      
      if(dl-1-x>=0 && value[dl-1-x]==0){
          value[dl-1-x]=arr[i].profit;
      }
    
    
      }
      
for(int i=0;i<size;i++){
    if(value[i]!=0){
        count++;
        ans+=value[i];
    }
}

return new int[]{count,ans };
      
      
    }
}

class myComparator implements Comparator<Job>{
    public int compare(Job a, Job b){
        return b.profit-a.profit;
    }
}


