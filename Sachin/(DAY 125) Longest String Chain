// TC: O(N^2) SC:O(N) - OPTIMAL SOLUTION

class Solution {

    public int longestStrChain(String[] word) {
        int n = word.length;

        Arrays.sort(word, (a, b) -> a.length() - b.length());

        System.out.println(Arrays.toString(word));

        int dp[] = new int[n];
        int omax = 0;

        for (int i = 0; i < n; i++) {
            int max = 0, mi = Integer.MIN_VALUE;

            for (int j = 0; j < i; j++) {
                if (check(word[j], word[i])) {
                    if (dp[j] > max) {
                        max = dp[j];
                        mi = j;
                    }
                }
            }

            if (mi != Integer.MIN_VALUE) dp[i] = dp[mi] + 1; else dp[i] = 1;

            omax = Math.max(omax, dp[i]);
        }

        return omax;
    }

    boolean check(String prev, String curr) {
        if (curr.length() - prev.length() != 1) return false;

        int p = prev.length();
        int c = curr.length();
        int i = 0, j = 0;

        while (i < p && j < c) {
            if (prev.charAt(i) == curr.charAt(j)) i++;
            j++;
        }

        return i == prev.length();
    }
}
