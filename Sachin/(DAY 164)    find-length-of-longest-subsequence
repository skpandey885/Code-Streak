// QUESTION LINK - https://practice.geeksforgeeks.org/problems/find-length-of-longest-subsequence4905/1/

import java.io.*;
import java.util.*; 
class GFG{
    public static void main(String args[]) throws IOException { 
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());

        while(t-- > 0){
            String input_line[] = read.readLine().trim().split("\\s+");
            int N = Integer.parseInt(input_line[0]);
            int M = Integer.parseInt(input_line[1]);
            input_line = read.readLine().trim().split("\\s+");
            String X = input_line[0];
            String Y = input_line[1];
            Solution obj = new Solution();
            int ans = obj.maxSubsequenceSubstring(X, Y, N, M); 
            System.out.println(ans);
        }
    } 
} // } Driver Code Ends


//User function Template for Java
class Solution 
{ 
    int maxSubsequenceSubstring(String X, String Y, int N, int M) 
    {
      return lcs(X,Y);
    }

        public static int lcs(String text1, String text2) {
        int m = text1.length() + 1, n = text2.length() + 1;

        int dp[][] = new int[m][n];
        int max = Integer.MIN_VALUE, ti = 0, tj = 0;

        for (int i = 0; i < m; i++) 
            for (int j = 0; j < n; j++) 
                if (i == 0 || j == 0) dp[i][j] = 0;

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                char one = text1.charAt(i - 1);
                char two = text2.charAt(j - 1);
                if (one == two) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i-1][j];
                }

                if (dp[i][j] > max) 
                    max = dp[i][j];


            }
        }

       return max;



    }




}  
