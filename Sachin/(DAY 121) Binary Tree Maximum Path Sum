// QUESTION LINK: https://leetcode.com/problems/binary-tree-maximum-path-sum/
// TC: O(N) SC: O(1)

class Solution {

    public int maxPathSum(TreeNode root) {
        
        int[] arr = new int[1];
        arr[0]=Integer.MIN_VALUE;

        if (root.left == null && root.right == null) return root.val;

        solve(root, arr);

        return arr[0];
 }

    int solve(TreeNode root, int arr[]) {
        if(root==null) return 0;

        int left = solve(root.left, arr);

        int right = solve(root.right, arr);
          
        int temp=0;
        
        if(left>0 || right >0)
          temp = Math.max(left,right) + root.val;
        else
            temp=root.val;
        
        int ans = Math.max(temp, (left+right+root.val));

        arr[0] = Math.max(ans, arr[0]);

        return temp;
    }
}
