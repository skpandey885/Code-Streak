// QUESTION LINK: https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1/#


// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main(String args[]) throws IOException {

        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String str[] = read.readLine().trim().split(" ");
            int V = Integer.parseInt(str[0]);
            int E = Integer.parseInt(str[1]);
    
            ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<ArrayList<ArrayList<Integer>>>();
            for(int i=0;i<V;i++)
            {
                adj.add(new ArrayList<ArrayList<Integer>>());
            }
            
            int i=0;
            while (i++<E) {
                String S[] = read.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                int w = Integer.parseInt(S[2]);
                ArrayList<Integer> t1 = new ArrayList<Integer>();
                ArrayList<Integer> t2 = new ArrayList<Integer>();
                t1.add(v);
                t1.add(w);
                t2.add(u);
                t2.add(w);
                adj.get(u).add(t1);
                adj.get(v).add(t2);
            }
            
            int S = Integer.parseInt(read.readLine());
            
            Solution ob = new Solution();
            
            int[] ptr = ob.dijkstra(V, adj, S);
            
            for(i=0; i<V; i++)
                System.out.print(ptr[i] + " ");
            System.out.println();
        }
    }
}// } Driver Code Ends


//User function Template for Java


class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {

        int path[]=new int[V];
        PriorityQueue<Pair2> pq=new PriorityQueue<>();

        pq.add(new Pair2(-1,S,0));

        boolean visited[]=new boolean[V];

        while(pq.size()>0){
            Pair2 curr=pq.remove();

            if(visited[curr.v])
                continue;

            visited[curr.v]=true;


            ArrayList<ArrayList<Integer>> ss=adj.get(curr.v);
            for (ArrayList temp: ss ){
                Pair2 p=new Pair2(curr.v,(int) temp.get(0),((int) temp.get(1)+curr.wt));
                pq.add(p);
            }


         path[curr.v]=curr.wt;

        }

        return path;

    }
}



class Pair2 implements Comparable<Pair2>{
    int v;
    int u;
    int wt;

    Pair2(int u, int v, int wt){
        this.v=v;
        this.u=u;
        this.wt=wt;
    }

    public int compareTo(Pair2 p){
        return (this.wt-p.wt);
    }


}



