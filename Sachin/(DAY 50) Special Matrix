//QUESTION LINK: https://practice.geeksforgeeks.org/problems/special-matrix4201/1/#

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int k = Integer.parseInt(s[2]);
            int[][] blocked_cells = new int[k][2];
            for(int i = 0; i < k; i++){
                String[] s1 = br.readLine().trim().split(" ");
                for(int j = 0; j < 2; j++){
                    blocked_cells[i][j] = Integer.parseInt(s1[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.FindWays(n, m, blocked_cells);
            System.out.println(ans);

        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
 
    public int FindWays(int n, int m, int[][] blocked_cells)
    {
     int arr[][]=new int[n][m];
      arr[n-1][m-1]=1;
      arr[0][0]=1;
      
      int dp[][]=new int[n][m];
      for(int i=0;i<n;i++){
          for(int j=0;j<m;j++){
              dp[i][j]=Integer.MIN_VALUE;
          }
      }
         for(int tt[]: blocked_cells){
            arr[tt[0]-1][tt[1]-1]=Integer.MIN_VALUE;
         }
    
      return traverse(0,0,arr,n,m,dp);
  
      
    }
    
  int traverse(int i, int j, int mainArray[][], int n, int m, int [][] dp){
        if(i<0 || i>=n || j<0 || j>=m || mainArray[i][j]==Integer.MIN_VALUE){
            return 0 ;
        }
        
        if(i==n-1 && j==m-1){
            return 1;
        }
        
        if(dp[i][j]!=Integer.MIN_VALUE)
         return dp[i][j];
        
        int sum=traverse(i+1,j,mainArray,n,m,dp)+traverse(i,j+1,mainArray,n,m,dp);
        dp[i][j]=sum;
        
        int mod=(int) Math.pow(10,9)+7;
        
        return (sum)%mod;
     
    }
    
    
    
    
}
