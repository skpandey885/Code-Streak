// QUESTION LINK: https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/

-----------------------------------------------------------------------------------------------------------------------------------------------
// TC: O(N^2) - SC:O(1) BRUTE FORCE APPROACH

class FindElements {
    TreeNode c;
    public FindElements(TreeNode root) {
    if(root!=null){
        root.val=0;
        c=root;
        traverse(root);
       }
    }

    public boolean find(int target) {
        return traverse(c,target);
    }

    void traverse(TreeNode root){
        if(root==null)
            return;

        if(root.left!=null)
            root.left.val=(root.val2)+1;

         if(root.right!=null)
            root.right.val=(root.val2)+2;

        traverse(root.left);
        traverse(root.right);

    }

   boolean traverse(TreeNode root,int target){
        if(root==null)
            return false;

         if(root.val==target)
             return true;

      return traverse(root.left,target) || traverse(root.right,target);
       }}
       
-----------------------------------------------------------------------------------------------------------------------------------      
       
       
// TC: O(N) - SC:O(N) OPTIMAL APPROACH

class FindElements {

Map<Integer,Integer> map=new HashMap<>();

    public FindElements(TreeNode root) {
        root.val=0;
        traverse(root);
    }

    public boolean find(int target) {
        return map.containsKey(target);
    }

    void traverse(TreeNode root){
        if(root==null)
            return;

        map.put(root.val,-1);

        if(root.left!=null)
            root.left.val=(root.val*2)+1;

         if(root.right!=null)
            root.right.val=(root.val*2)+2;

        traverse(root.left);
        traverse(root.right);

    }}
