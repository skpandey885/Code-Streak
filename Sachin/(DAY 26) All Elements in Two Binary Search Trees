/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
     
        // TC: O(M+N) M & N is the number of vertices in the tree.... SC: O(N)
        
            List<Integer> a=new ArrayList<>();
            List<Integer> b=new ArrayList<>();
            List<Integer> ans=new ArrayList<>();
          
       traverse(root1,a);
        traverse(root2,b);
          
        int i=0,j=0;
        while(i<a.size() && j<b.size()){
            if(a.get(i)<=b.get(j)){
                ans.add(a.get(i));
                i++;
            }else{
                ans.add(b.get(j));
                j++;
            }  
        }
        
        
        while(i<a.size())
            ans.add(a.get(i++));
        
         while(j<b.size())
            ans.add(b.get(j++));
        
        return ans;
        
   }
    
    
    void traverse(TreeNode root, List<Integer> arr){
        
        if(root==null) return;
       
        traverse(root.left,arr);
         arr.add(root.val);
        traverse(root.right,arr);
        
    }
}
