// QUESTION LINK: https://leetcode.com/problems/unique-paths-ii/
// TC: O(2^N) SC:O(N^2) - MEMOIZATION (MODERATE)

class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;

        int dp[][] = new int[m + 10][n + 10];

        for (int i = 0; i < dp.length; i++) for (int j = 0; j < dp[i].length; j++) dp[i][j] = -1;

        boolean visited[][] = new boolean[m][n];

        return traverse(0, 0, m, n, obstacleGrid, visited, dp);
    }

    int traverse(int i, int j, int m, int n, int grid[][], boolean visited[][], int dp[][]) {
        if (i >= m || j >= n || visited[i][j] || grid[i][j] == 1) return 0;

        if (i == m - 1 && j == n - 1) return 1;

        if (dp[i][j] != -1) return dp[i][j];

        visited[i][j] = true;
        int ans = traverse(i + 1, j, m, n, grid, visited, dp) + traverse(i, j + 1, m, n, grid, visited, dp);
        visited[i][j] = false;

        return dp[i][j] = ans;
    }
}
