// QUESTION LINK: https://leetcode.com/problems/combination-sum-iii/

// TC: (N^2LOGN) (NOT SURE) SC:O(N^2) - BRUTE FORCE

class Solution { 
    int findSum(List<Integer> arr){
        int sum=0;

     for(int i=0;i<arr.size();i++)
                sum+=arr.get(i);

        return sum;
    }

    public List<List<Integer>> combinationSum3(int k, int n) {

        List<List<Integer>> result=new ArrayList<>();
        List<Integer> arr=new ArrayList<>();

        boolean visited[]=new boolean[10];

        solve(result,arr,visited,k,n);

        return result;

    }

    void solve(List<List<Integer>> result, List<Integer> arr,boolean visited[] ,int k, int n){

        if(arr.size()>k){
            return;
        }

        if(arr.size()==k){

            int sum=findSum(arr);

            if(sum==n){
                List<Integer> temp=new ArrayList<>(arr);

                Collections.sort(temp);

                if(!result.contains(temp))
                result.add(temp);
            }
        }


        for(int i=1;i<=9;i++){
            if(i<=n && !visited[i]){

                visited[i]=true;

                 if(!arr.contains(i) || arr.isEmpty())
                  arr.add(i);

                solve(result,arr,visited,k,n);
                 visited[i]=false;
                arr.remove(arr.size()-1);
            }
        }   
    }   
}

----------------------------------------------------------------------------------------------------------------------------------


TC: O(N) SC:(N^2) - OPTIMAL SOLUTION

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> arr = new ArrayList<>();

        solve(result, arr,1, k, n);

        return result;
    }

    void solve(List<List<Integer>> result, List<Integer> arr,int index, int k, int n) {

        int t=arr.size();

        if(t>k)
            return;

        if(t==k && n==0){
        List<Integer> temp=new ArrayList<>(arr);
        result.add(temp);
        return;
     }



        for (int i = index; i <= 9; i++) {
                arr.add(i);
                solve(result, arr, i+1, k, n-i);
                arr.remove(arr.size() - 1);    
        }
    }
}
