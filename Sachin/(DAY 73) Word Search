// QUESTION LINK: https://leetcode.com/problems/word-search/
//       TC: O(4^N)         SC:O(M*N)  

class Solution {
    public boolean exist(char[][] board, String word) {
        
        char first=word.charAt(0);
        
        boolean visited[][]=new boolean[board.length][board[0].length];
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if (solve(board,word,"",i,j,0,visited)){
                    return true;
                } } }
        
        return false;

    }
    
    boolean solve(char[][] board, String word, String asf, int i, int j, int idx, boolean visited[][]){
        
        if(asf.length()==word.length())
             if(asf.equals(word))
                return true;
           
        int m=board.length, n=board[0].length;
          
          if(i>=m || j>=n || i<0 || j<0 || visited[i][j])
                 return false;
        
        if(board[i][j]!=word.charAt(idx))
            return false;
            
        asf+=board[i][j];
        
        visited[i][j]=true;
        boolean a = solve(board,word,asf,i+1,j,idx+1,visited);
        boolean b = solve(board,word,asf,i,j+1,idx+1,visited);
        boolean c = solve(board,word,asf,i-1,j,idx+1,visited);
        boolean d = solve(board,word,asf,i,j-1,idx+1,visited);
        visited[i][j]=false;
        return (a || b || c || d) ;
    }
    
    
}
