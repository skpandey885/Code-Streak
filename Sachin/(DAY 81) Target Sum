//QUESTION LINK: https://leetcode.com/problems/target-sum/

-------------------------------------------------------------------------------------------------------------------------


// TC: O(2^N) SC: O(1) - BRUTE FORCE (RECURSION)

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        return solver(nums, nums.length, target, 0);
    }

    int solver(int A[], int n, int target, int sum1) {
        if (n <= 0) {
            if (sum1 == target) return 1;
            return 0;
        }

        int currElem = A[n - 1];

        int a = solver(A, n - 1, target, sum1 + (-1 * currElem));
        int b = solver(A, n - 1, target, sum1 + (currElem));
        return a + b;
    }
}
-------------------------------------------------------------------------------------------------------------------------



TC: O(N^2) SC: O(N*2) - OPTIMAL (MEMOISATION)

class Solution {

public int findTargetSumWays(int[] a, int target) {
int n = a.length;

int sum = getSum(a, n);

if (sum < target || sum + target < 0 || (sum + target) % 2 != 0) 
return 0;

int countZeroes = getZeroesCount(a, n);
int req = (target + sum) / 2;

return (int) Math.pow(2, countZeroes) * countSubsetSum(a, n, req);
}


public int countSubsetSum(int a[], int n, int sum) {
int dp[][] = new int[n + 1][sum + 1];
for (int i = 0; i <= sum; i++) {
dp[0][i] = 0;
}

for (int i = 0; i <= n; i++) {
dp[i][0] = 1;
}

for (int i = 1; i <= n; i++) {
for (int j = 1; j <= sum; j++) {
if (a[i - 1] != 0 && a[i - 1] <= j) {
dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]];
} else dp[i][j] = dp[i - 1][j];
}
}

return dp[n][sum];
}

int getSum(int A[], int n){
int sum=0;
for(int i: A)
sum+=i;
return sum;
}
int getZeroesCount(int A[], int n){
int count=0;
for(int i: A)
if(i==0)
count++;
return count;
}}
