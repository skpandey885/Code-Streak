// QUESTION LINK: https://practice.geeksforgeeks.org/problems/form-a-palindrome1455/1/#

                         //  TC:  O(N^2)               SC:O(N^2) 

class Solution{
    static int countMin(String str)
    {
      int val=longestPalindromeSubseq(str);
      
      return str.length()-val;
    }
    
    
      public static int longestPalindromeSubseq(String s) {
        
        StringBuilder sb=new StringBuilder();
        sb.append(s);
        sb.reverse();
        
        return longestCommonSubsequence(s,String.valueOf(sb)); 
    }
    
      public static int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[text1.length()+1][text2.length()+1];
        
        for (int i = 0; i < dp.length; i++) 
          for (int j = 0; j < dp[i].length; j++) 
               if(i==0 || j==0)
                     dp[i][j]=0;
              
              
              
        
        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) 
            {
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                      int val1 = dp[i][j - 1];
                     int val2 = dp[i - 1][j];
                     dp[i][j]=Math.max(val1,val2);
                }
                
            }}
        
        return dp[text1.length()][text2.length()];

       
    }
}
