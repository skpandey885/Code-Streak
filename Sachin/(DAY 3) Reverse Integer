//QUESTION LINK:  https://leetcode.com/problems/reverse-integer/

---------------------------------------------------------------------------------------------------------------------------------------
                  // TC: O(N) where N is the number of digits in a given number SC:O(N) - BRUTE FORCE APPROACH

class Solution {
    public int reverse(int x) {

      long num=x;

        int sign=(x<0)?(-1):1;

        System.out.println(sign);
         num*=sign;

        char ch[]=String.valueOf(num).toCharArray();
        int n=ch.length;

        char []reversed=reverse(ch,n);

        String rev2=String.valueOf(reversed);
        System.out.print(rev2);
        long tt=Long.parseLong(rev2);

        tt*=sign;

        if(tt>Integer.MAX_VALUE || tt<Integer.MIN_VALUE)
            return 0;

        return (int)tt;
    }

    char[] reverse(char ch[],int n){

        for(int i=0;i<(n/2);i++){
            char temp=ch[i];
            ch[i]=ch[n-1-i];
            ch[n-1-i]=temp;
        }
        return ch;
    }
}


---------------------------------------------------------------------------------------------------------------------------------------

                      // TC: O(N) where N is the number of digits in a given number SC:O(1) - OPTIMAL APPROACH

class Solution {
    public int reverse(int x) {
        int num=x;
        int sign=(x<0)?-1:1;  
        x*=sign;

       long reversed=0;

        while(x>0){
            int rem=x%10;
            reversed=(reversed*10)+rem;
            x/=10;
        }

        reversed*=sign;

        if(reversed<Integer.MIN_VALUE | reversed>Integer.MAX_VALUE)
            return 0;

        return (int) reversed;        

    }
}


