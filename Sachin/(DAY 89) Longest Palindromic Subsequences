// QUESTION LINK: https://leetcode.com/problems/longest-palindromic-subsequence/
--------------------------------------------------------------------------------------------------------------------------------

// TC:O(2^N) SC:O(N) - BRUTE FORCE (MEMOIZATION)

class Solution {

    public int longestPalindromeSubseq(String s) {
        Map<String, Integer> map = new HashMap<>();

        int ans = solve(s.length(), s, "", map);
        return ans;
    }

    int solve(int n, String s, String asf, Map<String, Integer> map) {
        if (n == 0) {
            if (isPalindrome(asf)) return asf.length();

            return 0;
        }

        String key = n + "-" + asf;

        if (map.containsKey(key)) return map.get(key);

        String temp = asf + String.valueOf(s.charAt(n - 1));

        int st = solve(n - 1, s, temp, map);
        int mm = solve(n - 1, s, asf, map);

        int ans = Math.max(st, mm);

        map.put(key, ans);
        return ans;
    }

    static boolean isPalindrome(String str) {
        int i = 0, j = str.length() - 1;

        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) return false;

            i++;
            j--;
        }

        return true;
    }
}

--------------------------------------------------------------------------------------------------------------------------------

// TC:O(NM) SC:O(NM) - OPTIMA (DP)

class Solution {
    public int longestPalindromeSubseq(String s) {

        StringBuilder sb=new StringBuilder();
        sb.append(s);
        sb.reverse();

        return longestCommonSubsequence(s,String.valueOf(sb)); 
    }

      public int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[text1.length()+1][text2.length()+1];

        for (int i = 0; i < dp.length; i++) 
          for (int j = 0; j < dp[i].length; j++) 
               if(i==0 || j==0)
                     dp[i][j]=0;




        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) 
            {
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                      int val1 = dp[i][j - 1];
                     int val2 = dp[i - 1][j];
                     dp[i][j]=Math.max(val1,val2);
                }

            }}

        return dp[text1.length()][text2.length()];


    }

}
