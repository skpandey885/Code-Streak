// QUESTION LINK: https://leetcode.com/problems/rotate-list/

---------------------------------------------------------------------------------------------------------------------------------------------------------

// TC: O(N) SC:O(N) - BRUTE FORCE COMPLEXITY

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        int n=0;
        if(head==null)
            return head;

        ArrayList<ListNode> arr=new ArrayList<>();
        ListNode temp=head;

         while(head!=null){
             n++;
            arr.add(head);
            head=head.next;
        }

         k=k%n;
         Collections.reverse(arr);
         Collections.reverse(arr.subList(0,k));    
        Collections.reverse(arr.subList(k,n));
         ListNode ans=arr.get(0);
         ListNode gg=ans;
         arr.remove(0);

        while(!arr.isEmpty()){
            ListNode curr=arr.get(0);
             curr.next=null;
             arr.remove(0);
             ans.next=curr;
             ans=curr;
        } 
        return gg; 
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// TC:O(N) SC:O(1) - OPTIMAL SOLUTION

class Solution {
    public ListNode rotateRight(ListNode head, int k) {

        if(head==null)
            return head;

        int n=0;

         ListNode temp=head;
         ListNode temp2=head;

        while(temp.next!=null)
        {    n++;
            temp=temp.next;
        }

        n++;
        k=k%n;
        temp.next=head;

       for(int i=0;i+1<n-k;i++)
           temp2=temp2.next;

           ListNode ans=temp2.next;
           temp2.next=null;

        return ans;      
    }
}
