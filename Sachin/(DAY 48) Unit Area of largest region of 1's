// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int[][] grid = new int[n][m];
            for(int i = 0; i < n; i++){
                String[] S = br.readLine().trim().split(" ");
                for(int j = 0; j < m; j++){
                    grid[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.findMaxArea(grid);
            System.out.println(ans);
        }
    }
}// } Driver Code Ends


class Solution
{
    //Function to find unit area of the largest region of 1s.
static int count=0;
    public int findMaxArea(int[][] grid)
    {
        int n=grid.length,m=grid[0].length ;
     boolean visited[][]=new boolean[n][m];
     
         
    int val=-10222;
 for(int i=0;i<n;i++){
     for(int j=0;j<m;j++){
         if(grid[i][j]==1 && visited[i][j]==false){
          count=0;
         traverse(i,j,visited,grid,n,m);
         val=(int) Math.max(val,count);
    }
     }
 }
 
 return val;
        
    }
     
   static void traverse(int i, int j, boolean visited[][],int grid[][],int n, int m){
        if(i<0 || j<0 || i>=n || j>=m || (grid[i][j]==0) || visited[i][j]==true)
        return;
        
        visited[i][j]=true;
        count++;
        traverse(i+1,j,visited,grid,n,m);
        traverse(i-1,j,visited,grid,n,m);
        traverse(i,j+1,visited,grid,n,m);
        traverse(i,j-1,visited,grid,n,m); 
        traverse(i+1,j-1,visited,grid,n,m); 
        traverse(i+1,j+1,visited,grid,n,m); 
        traverse(i-1,j-1,visited,grid,n,m); 
        traverse(i-1,j+1,visited,grid,n,m);
    }
    
    
}
