// Question Link - https://leetcode.com/problems/univalued-binary-tree/



--------------------------------------------------------------------------------------------------
         //  TC: O(N) where N= Number of Nodes in the tree SC: O(N) - BRUTE FORCE SOLUTION
         
         
class Solution {
    Set<Integer> set=new HashSet<>();
    public boolean isUnivalTree(TreeNode root) {
        traverse(root);
        return set.size()==1;
    }
    
    void traverse(TreeNode root){
        if(root==null)
            return;
        
        set.add(root.val);
        traverse(root.left);
        traverse(root.right);
    }
}


--------------------------------------------------------------------------------------------------

        //   TC: O(N) where N= Number of Nodes in the tree SC: O(1) - OPTIMAL SOLUTION


class Solution {
    public boolean isUnivalTree(TreeNode root) {
        if(root==null)
            return true;
        
        if(root.left!=null)
       if(root.left.val!=root.val )
            return false;
        
        if(root.right!=null)
        if(root.right.val!=root.val )
            return false;

        
  return isUnivalTree(root.left) && isUnivalTree(root.right);
        
    }
}
