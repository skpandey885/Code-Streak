//QUESTION LINK: https://leetcode.com/problems/permutations-ii/

     // TC:O(N^2)    (NOT SURE)        SC:O(N^2)      

class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> ls = new ArrayList<>();
        boolean visited[] = new boolean[nums.length];

        solve(result, ls, nums, visited);
        return result;
    }

    void solve(List<List<Integer>> result, List<Integer> ls, int nums[], boolean visited[]) {
        
        int n=nums.length;
        if (ls.size() == n) {
            List<Integer> temp = new ArrayList<>(ls);
            
            if(!result.contains(temp))
            result.add(temp);
            return;
        }

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                ls.add(nums[i]);
                visited[i] = true;

                solve(result, ls, nums, visited);

                ls.remove(ls.size() - 1);
                visited[i] = false;
            }
        }
    }
}
