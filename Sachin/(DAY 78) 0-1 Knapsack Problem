// QUESTION LINK: https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1#
// TC: O(N*W)    SC:O(N*W)

class Solution 
{ 
   static int dp[][]=new int[1010][1010];
    
    
    
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        for(int i=0;i<1010;i++)
        for(int j=0;j<1010;j++)
           dp[i][j]=-1;
       
         int arr[]=new int[n];
         Arrays.fill(arr, Integer.MAX_VALUE);
         
         return traverse(W,wt,val,n,arr);
    } 
    
    static int traverse(int W, int wt[], int val[], int n, int arr[]){
        
        
        if(n==0 || W==0)
          return 0;
         
          if(dp[W][n]!=-1)
          return dp[W][n];
          
          int q=traverse(W,wt,val,n-1,arr);
          
          if(wt[n-1]<=W){
              int p=val[n-1]+traverse((W- wt[n-1]),wt,val,n-1,arr);
              int x=(int) Math.max(p,q);
         
           return dp[W][n]=x;
          }
         
          return dp[W][n]=q;
    }
    
}


