// QUESTION LINK: https://leetcode.com/problems/longest-common-subsequence/
// TC: O (2^N) SC: O(1) - BRUTE FORCE

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return solve(text1,text2,text1.length(),text2.length());
    }


    int solve(String a,  String b, int m, int n){
        if(m==0 || n==0)
            return 0;

        char one=a.charAt(m-1);
        char two=b.charAt(n-1);

        if(one==two){
            return 1+solve(a,b,m-1,n-1);
        }else{

            int val1=solve(a,b,m,n-1);
            int val2=solve(a,b,m-1,n);

            return val1>val2?val1:val2;

        }
    }

}




// TC: O( Less than 2^N ) SC:O(N^2) - MODERATE

class Solution {
    int dp[][]= new int[1001][1001];

    public int longestCommonSubsequence(String text1, String text2) {

        for (int i = 0; i < dp.length; i++)
            for (int j = 0; j < dp.length; j++) 
                dp[i][j] = -1;

        return solve(text1, text2, text1.length(), text2.length());
    }

    int solve(String a, String b, int m, int n) {
        if (m == 0 || n == 0)
            return 0;

        char one = a.charAt(m - 1);
        char two = b.charAt(n - 1);

          if(dp[m][n]!=-1)
            return dp[m][n];

        if (one == two) 
            return dp[m][n]= 1 + solve(a, b, m - 1, n - 1);

            int val1 = solve(a, b, m, n - 1);
            int val2 = solve(a, b, m - 1, n);

            return (dp[m][n]=(int) Math.max(val1,val2));

    }
}
