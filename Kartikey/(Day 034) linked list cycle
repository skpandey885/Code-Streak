// https://leetcode.com/problems/linked-list-cycle/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// class Solution {
// public:
//     bool hasCycle(ListNode *head) {
//         map<ListNode*, bool> visited;
//         ListNode *temp = head;
        
//         if(head == NULL){
//             return false;
//         }
//         while(temp != NULL){
//             if(visited[temp] == true ){
//                 return true;
//             }
//            visited[temp] = true;
//             temp = temp->next;
           
            
//         }
//         return false;
//     }
// };


// approach 2 floyd cycle detection.

class Solution {
public:
    bool hasCycle(ListNode *head) {
       
        
        if(head == NULL)
            return false;
        
     ListNode* fast =  head;
        ListNode* slow = head;
        
        while(fast != NULL &&  fast->next!=NULL){
            fast = fast->next->next;
           
            slow = slow->next;
            
            if(fast == slow){
                return true;
            }
        }
        return false;
        
    }
};
